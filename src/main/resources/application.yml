server:
  port: 9000
spring:
  # Make sure to provide the application:name and profiles:active
  application:
    name: "cards"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3308/cardsdb
    username: root
    password: root
  jpa:
    show-sql: true  # To show the executed SQL inside the console
  sql:
    init:
      mode: always # Always run the schema sql commands
  config:
    import: "optional:configserver:http://localhost:8071/"  # We must use configserver here regardless of the name provided to application (configserver); optional is used when we want application to be started if case of issue as well.
  # Adding rabbitmq configuration
#  rabbitmq:
#    host: "localhost"
#    port: 5672
#    username: "guest"
#    password: "guest"

# Refresh the MS when any changes occur (actuator/refresh). Here I'm including all the endpoints
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:   # Whenever MS is trying to shut down, it will deregister from the details from eureka server
    shutdown:
      enabled: true
    info:
      env:
        enabled: true
    health:
      probes:
        enabled: true

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    #    hostname: localhost  # Not needed here, as this is not the eureka server, this is the client MS which will connect with the eureka server
    preferIpAddress: true   # Accounts MS will register with my Eureka server by using the IP, so other MS can connect with this MS using the IP
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "cards"
    description: "Jain Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      microservice:
        cards: DEBUG